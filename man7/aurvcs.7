.TH AURVCS 7 2019-10-18 AURUTILS
.SH NAME
aurvcs \- workflows for VCS packages
.
.SH DESCRIPTION
Workflows for building and managing VCS packages.
.
.SH aur\-vercmp\-devel
Takes the contents of a local repository
.RB ( "aur\-repo \-\-list" )
and matches them against a common pattern for VCS packages
.RB ( "grep \-E $AURVCS" ).
It then looks in the
.BR aur\-sync (1)
cache
.RB ( "find $AURDEST" )
for relevant directories.
.PP
Any existing
.BR PKGBUILD (5)
files in these directories are executed, with upstream sources updated
to their latest revision.
.RB ( aur\-srcver
using
.BR "makepkg \-o" ).
.PP
Any option arguments are forwarded to
.BR aur\-repo (1).
.
.SS Program source
.EX
    #!/bin/bash
    XDG_CACHE_HOME=${XDG_CACHE_HOME:\-$HOME/.cache}
    AURDEST=${AURDEST:\-$XDG_CACHE_HOME/aurutils/sync}
    AURVCS=${AURVCS:\-.*\-(cvs|svn|git|hg|bzr|darcs)$}

    filter_vcs() {
        awk \-v "mask=$AURVCS" \(aq$1 \(ti mask {print $1}\(aq "$@"
    }

    # Note that valid PKGBUILDs cannot contain \en in pkgname.
    get_latest_revision() {
        grep \-Fxf \- <(printf \(aq%s\en\(aq *) | xargs \-r aur srcver
    }

    db_tmp=$(mktemp)
    trap \(aqrm \-rf "$db_tmp"\(aq EXIT

    # Retrieve a list of the local repository contents. The repository
    # can be specified with the usual aur\-repo arguments.
    aur repo \-\-list "$@" >"$db_tmp"

    # Find VCS packages that are outdated according to aur\-srcver.
    # This checks out the latest revision for existing source directories,
    # assuming the PKGBUILD has been viewed priorly.
    if cd "$AURDEST"; then
        aur vercmp \-p <(filter_vcs "$db_tmp" | get_latest_revision) <"$db_tmp"
    fi
.EE
.
.SS Notes
In the last line, the resulting package versions
.RB ( "vcs_info" )
are compared against the local repository
.RB ( "db_info" ).
If the package version is newer, it is printed to stdout. This may be
combined with
.BR aur\-sync (1)
as follows:
.PP
.EX
    $ mapfile \-t packages < <(aur vercmp\-devel | cut \-d" " \-f1)
    $ aur sync "${packages[@]}" \-\-no\-ver\-shallow
.EE
.PP
Version-control packages typically have
.B pkgver
set to the upstream revision at the time of package submission, making
the AUR-advertised version older than the latest version.
.PP
Here, the
.B \-\-no\-ver\-shallow
option ignores the AUR information
.I only
for packages from standard input. Further arguments can be appended to
.BR aur\-sync (1),
such as
.I \-\-upgrades
to update regular and VCS packages in one go.
.
.SS Populating the cache
As described, the above relies on already available
.BR PKGBUILD (5)
files. If the
.BR aur\-sync (1)
cache is sparse or the package has meanwhile been updated by the AUR
maintainer (for example, to indicate a new upstream source),
information reported by
.B aur\-vercmp\-devel
may be incomplete.
.PP
The following mediates this by downloading all VCS packages in a local
repository anew, with all build files and their diffs offered for
inspection.
.PP
.EX
    $ mapfile \-t packages < <(aur repo \-\-list | cut \-f1 | grep \-E "$AURVCS")
    $ aur sync "${packages[@]}" \-\-no\-ver \-\-no\-build
.EE
.
\" The last pipeline will also show any non-VCS dependencies.  Since
\" the respective PKGBUILDs are not run by aur\-srcver, they are not of
\" relevance. Use aur\-fetch manually?
.
.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME
.
.\" vim: set textwidth=72:

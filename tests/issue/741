#!/bin/bash
set -e

tmp=$(mktemp -d)
trap 'rm -rf -- "$tmp"' EXIT
tmp_uid=custom-$RANDOM

cat >"$tmp"/pacman.conf <<EOF
[options]
HoldPkg = pacman-git glibc
Architecture = auto
CheckSpace
[core]
Include = /etc/pacman.d/mirrorlist
[extra]
Include = /etc/pacman.d/mirrorlist
[community]
Include = /etc/pacman.d/mirrorlist
[$tmp_uid]
SigLevel = Optional TrustAll
Server = file://$tmp
EOF

# create local repository
repo-add "$tmp/$tmp_uid".db.tar

config=(--config "$tmp"/pacman.conf)
pkg=aurutils
rev=0f3cbf98ded15a6088f1e3f9ebfe0de20c854f24
ver=2.3.1

# checkout and build previous revision
cd "$tmp"
env - HOME=$HOME USER=$USER PATH=$PATH aur fetch "$pkg"

cd "$pkg"
git reset --hard "$rev"
# TODO: use --dbpath to avoid privilege escalation
env - HOME=$HOME USER=$USER PATH=$PATH aur build \
     -rnsd "$tmp_uid" --margs --skippgpcheck "${config[@]}"
pacsift --config "$tmp"/pacman.conf --repo="$tmp_uid" --satisfies="$pkg=$ver"

# update to latest revision
cd -
env - HOME=$HOME USER=$USER PATH=$PATH AURDEST="$tmp" aur sync \
    -rnd "$tmp_uid" --margs --skippgpcheck --no-view "${config[@]}" "$pkg"
pacsift --config "$tmp"/pacman.conf --repo="$tmp_uid" --satisfies="$pkg>$ver"

# vim: set et sw=4 sts=4 ft=sh:\n

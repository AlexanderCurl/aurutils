#!/bin/bash
set -e
# Packages are taken from the command-line; alternatively, they can be taken
# from a file or stdin.
packages_argv=("$@")

# 0. Create a scratch space and switch to it
tmp=$(mktemp -d)
cd "$tmp"

# 0. Retrieve local repository information
# Adjust accordingly if more than one local repository are used.
{ read -r repo
  read -r root
  read -r path
} < <(aur repo --status)
wait $!

# 1. Resolve the dependency tree of given packages
# This can be done locally (with a custom set of PKGBUILDs, aur graph) 
# or remotely (for AUR-published PKGBUILDS, aur-depends). 
# aur-graph and aur-depends support input from the command-line 
# or from stdin (with `-`).
aur depends --pkgname --no-checkdepends "${packages_argv[@]}" | tee queue

# 2. Avoid concurrent use
(
    flock -n 200 || exit 1

    # 3. Operate on copy of existing database
    db_file=$(basename -- "$path")
    cp -v "$path" "$db_file"

    # 4. Remove packages which are not in the dependency tree
    aur repo -d "$repo" --list | grep -Fxvf queue | while read -r pkg; do
        repo-remove "$path" "$pkg"
    done

    # 5. Generate pacman.conf with temporary database
    # This is made with host builds in mind, adjust for container builds 
    # as necessary.
    { printf '[options]\n'
      pacconf --raw --options

      pacconf --repo-list | grep -Fxv "$repo" | while read -r repo_static; do
          printf '[%s]\n' "$repo_static"
          pacconf --raw --repo="$repo_static"
      done

      printf '[%s]\n' "$repo"
      printf 'Server = %s\n' "$PWD/$db_file"
      # Include other options as desired
    } > pacman.conf

    # 6. Retrieve AUR repositories
    # It is advised to do this in a different directory than /tmp,
    # because this is where the build process will take place.
    AURDEST=${XDG_CACHE_HOME:$HOME/.cache}/aurutils/sync
    cd "$AURDEST"
    aur fetch - < queue

    # 7. Inspect build files and diffs (viewed commits are stored in
    # $XDG_CONFIG_HOME/aurutils/view) in a temporary directory
    aur view -a queue

    # 8. If we arrive here, the user has confirmed has confirmed the
    # package files are OK, and we can start the build process.
    aur build -a queue --pacman-conf="$tmp/pacman.conf" --noconfirm

    # 9. If we arrive here, the repository is in the desired
    # state. Copy it over, with a backup just in case.
    cp -bv "$PWD/db_file" "$path"
    
) 200> /tmp/lockfile

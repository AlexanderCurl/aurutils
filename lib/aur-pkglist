#!/bin/bash
# aur-pkglist - print the AUR package list
set -o errexit
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=pkglist
XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
AUR_ARCHIVE=${AUR_ARCHIVE:-$AUR_LOCATION}
AUR_ARCHIVE_ROOT=${AUR_ARCHIVE_ROOT:-$XDG_STATE_HOME/aurweb-archive}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
export GIT_HTTP_USER_AGENT=aurutils

# default options
ttl=600 mode=cat pkglist=pkgname.json archive=pkgnames use_system_time=0 use_gc=0

usage() {
    printf >&2 'usage: %s [-bqsi] [-t ttl]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='t:bQiqun'
opt_long=('pkgbase' 'pkgname' 'ttl:' 'users' 'quiet' 'systime' 'info'
          'info-pkgbase' 'gc' 'plain')
opt_hidden=('dump-options' 'time:')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset mode
while true; do
    case "$1" in
        -b|--pkgbase)
            pkglist=pkgbase.json; archive=pkgbases ;;
        -n|--pkgname)
            pkglist=pkgname.json; archive=pkgnames ;;
        --users)
            pkglist=users.json; archive=users ;;
        -i|--info)
            pkglist=pkgname.json; archive=metadata ;;
        --info-pkgbase)
            pkglist=pkgbase.json; archive=metadata ;;
        -q|-u|--quiet)
            mode=none ;;
        -t|--time|--ttl)
            shift; ttl=$1 ;;
        -Q|--systime)
            use_system_time=1 ;;
        --plain)
            mode=plain ;;
        --gc)
            use_gc=1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if ! [[ $ttl =~ -?[0-9]+ ]]; then
    printf >&2 "error: --ttl requires an integer ('%s' provided)\n" "$ttl"
    exit 1
fi

mkdir -p "$AUR_ARCHIVE_ROOT"

# aurweb git archive
if [[ ! -d $AUR_ARCHIVE_ROOT/.git ]]; then
    git clone "$AUR_ARCHIVE/$archive".git "$AUR_ARCHIVE_ROOT/$archive"

else
    git() { command git -C "$AUR_ARCHIVE_ROOT" "$@"; }

    if (( ttl < 0 )); then
        : # skip upgrades
    elif (( use_system_time )); then
        sec_l=$(git log -1 --pretty="format:%ct")
        sec_d=$(date '+%s')

        if (( sec_d - sec_l > ttl )); then
            git pull
        fi
    else
        sec_l=$(git log -1 --pretty="format:%ct")
        git fetch

        rev_u=$(git rev-parse FETCH_HEAD)
        sec_d=$(git log "$rev_u" --pretty="format:%ct")

        # Since any new revisions are retrieved by git-fetch, merge them
        # regardless of --ttl settings. To improve performance, `prefetch` tasks
        # can be run periodically. See git-maintenance(1) for details.
        if (( sec_d - sec_l > 0 )); then
            git merge --ff-only
        fi
    fi

    if (( use_gc )); then
        git gc --aggressive
    fi
fi

cd "$AUR_ARCHIVE_ROOT/$archive"

case $mode in
    cat)
        cat "$pkglist" ;;
    plain)
        tr -d '"][' "$pkglist" | tr -s ',' '\n' ;;
    none)
        printf '%s\n' "$PWD/$pkglist" ;;
esac

# vim: set et sw=4 sts=4 ft=sh:

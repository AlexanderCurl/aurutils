#!/bin/bash
# aur-repo - manage local repositories
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=repo
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
db_query=local table_format=0 mode=none field=none

# default arguments
conf_args=()

db_field() {
    # do not extract an empty database (#727)
    (( $(bsdtar -tf "$2" | wc -l) )) || return 0

    bsdtar -Oxf "$2" '*/desc' | awk -v field="^%$1%$" '
    $0 ~ field {
        while (getline && NF != 0) { print; }
    }'
}

db_table() {
    # do not extract an empty database (#727)
    (( $(bsdtar -tf "$2" | wc -l) )) || return 0
    
    bsdtar -Oxf "$2" '*/desc' | awk -v table="$1" '
    function print_previous() {
        table ? format = "%s\t%s\t%s\t%s\n" : format = "%1$s\t%4$s\n"

        ## Add dependency to self (packages with no dependencies)
        printf format, pkgname, pkgname, pkgbase, pkgver

        if (table) {
            for (i in dependencies) {
                printf format, pkgname, dependencies[i], pkgbase, pkgver
            }
        }
    }

    BEGIN {
        pkgname = pkgbase = pkgver = "-"
        delete dependencies[0]
    }

    /^%FILENAME%$/ && FNR > 1 {
        print_previous()
        pkgname = pkgbase = pkgver = "-"
        delete dependencies
    }

    /^%NAME%$/ {
        getline
        pkgname = $1
    }

    /^%BASE%$/ {
        getline
        pkgbase = $1
    }

    /^%VERSION%$/ {
        getline
        pkgver = $1
    }

    /^%(MAKE|CHECK)?DEPENDS%$/ {
        while (table && getline && $0 != "") {
            dependencies[i++] = $1
        }
    }

    END {
        print_previous()
    }'
}

usage() {
    printf >&2 'usage: %s [-d repo] [-r path] [-alqtuS]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

## option parsing
opt_short='c:d:r:F:alqtuS'
opt_long=('config:' 'database:' 'repo:' 'root:' 'all' 'list' 'path'
          'path-list' 'repo-list' 'sync' 'upgrades' 'table' 'quiet'
          'status-file:' 'field:')
opt_hidden=('dump-options' 'list-repo' 'list-path' 'status')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset mode list db_name db_root status_file pacman_conf vercmp_args field
while true; do
    case $1 in
        -d|--database|--repo)
            shift; db_name=$1 ;;
        -r|--root)
            shift; db_root=$1 ;;
        -c|--config)
            shift; pacman_conf=$1 ;;
        -l|--list)
            mode=packages; table_format=0 ;;
        -t|--table)
            mode=packages; table_format=1 ;;
        -a|--all)
            mode=upgrades; vercmp_args+=(-a) ;;
        -q|--quiet)
            mode=upgrades; vercmp_args+=(-q) ;;
        -u|--upgrades)
            mode=upgrades ;;
        --status-file)
            shift; status_file=$1 ;;
        -S|--sync)
            db_query=sync ;;
        -F|--field)
            shift; mode=files; field=$1 ;;
        ## deprecated options
        --path)
            mode=path ;;
        --path-list|--list-path)
            list=path ;;
        --repo-list|--list-repo)
            list=repo ;;
        --status)
            status_file=/dev/stdout ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if [[ -v pacman_conf ]]; then
    conf_args+=(--config "$pacman_conf")
fi

# assign environment variables
: "${db_ext=$AUR_DBEXT}" "${db_name=$AUR_REPO}" "${db_root=$AUR_DBROOT}"

unset conf_file_repo conf_file_serv conf_file_path server
while read -r key _ value; do
    case $key=$value in
        \[*\]*)
            section=${key:1:-1}
            ;;
        DBPath=*)
            pacman_dbpath=$value
            ;;
        Server=file://*)
            server=${value#file://}
            conf_file_repo+=("$section")
            conf_file_serv+=("$server")
            conf_file_path+=("$server/$section.${db_ext:-db}")

            if [[ $section == "$db_name" ]]; then
                if ! [[ $db_root ]]; then
                    db_root=$server
                elif [[ $db_root != "$server" ]]; then
                    printf >&2 '%s: warning: --root and pacman.conf mismatch (%s)\n' "$argv0" "$db_name"
                fi
            fi
            ;;
        Server=*://*)
            if [[ $section == "$db_name" ]] && ! [[ $db_root ]]; then
                db_root=$value
            fi
            ;;
    esac
done < <(pacman-conf "${conf_args[@]}")
wait $! || exit

# list information on available local repositories
case $list in
    path|repo)
        if ! [[ ${conf_file_repo[*]} ]]; then
            printf >&2 '%s: no file:// repository configured\n' "$argv0"
            exit 2
        fi
        ;;&
    path)
        realpath -- "${conf_file_path[@]}" # resolve repo-add symlink
        exit 0
        ;;
    repo)
        printf '%s\n' "${conf_file_repo[@]}"
        exit 0
        ;;
esac

# select local repository from pacman configuration, if no repository
# was specified on the command-line
if ! [[ $db_name ]]; then
    case ${#conf_file_repo[@]} in
        1) db_name=${conf_file_repo[0]}
           db_root=${conf_file_serv[0]}
           ;;
        0) printf >&2 '%s: no file:// repository configured\n' "$argv0"
           exit 2
           ;;
        *) printf >&2 '%s: repository choice is ambiguous (use -d to specify)\n' "$argv0"
           for i in "${!conf_file_repo[@]}"; do
               printf '%q\t%q\n' "${conf_file_repo[$i]}" "${conf_file_path[$i]}"
           done | column -d $'\t' -t >&2
           exit 1
           ;;
    esac
fi

case $db_query in
    local)
        if ! [[ $db_root ]]; then
            printf >&2 '%s: %s: repository path not found\n' "$argv0" "$db_name"
            exit 2
        elif [[ $db_root == *://* ]]; then
            printf >&2 '%s: %s: object is remote (use -S to query)\n' "$argv0" "$db_root"
            exit 66
        elif ! [[ -d $db_root ]]; then
            printf >&2 '%s: %s: not a directory\n' "$argv0" "$db_root"
            exit 20
        fi
        db_path=$db_root/$db_name.${db_ext:-db}
        db_path=$(realpath -- "$db_path") # resolve repo-add symlink
        ;;
    sync)
        db_path=$pacman_dbpath/sync/$db_name.${db_ext:-db}
        ;;
esac

if [[ ! -f $db_path ]]; then
    printf >&2 '%s: %s: not a file\n' "$argv0" "$db_path"
    exit 2
fi

if [[ -v status_file ]]; then
    { printf 'repo:%s\n' "$db_name"
      printf 'root:%s\n' "$db_root"
      printf 'path:%s\n' "$db_path"
    } > "$status_file"
fi

case $mode in
    files)
        db_field "${field^^}" "$db_path"
        ;;
    upgrades)
        db_table '0' "$db_path" | aur vercmp "${vercmp_args[@]}"
        ;;
    packages)
        db_table "$table_format" "$db_path"
        ;;
    path)
        printf '%s\n' "$db_path"
        ;;
    *)
        ;;
esac

# vim: set et sw=4 sts=4 ft=sh:

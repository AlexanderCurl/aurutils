#!/bin/bash
# aur-search - search for AUR packages
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=search
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
multiple=section search_by=name-desc sort_key=Name type=search mode=query color=auto

usage() {
    printf >&2 'usage: %s [-adimnqrsv] [-k key] pkgname...\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='f:k:adimnqrsv'
opt_long=('any' 'info' 'search' 'desc' 'maintainer' 'name' 'depends' 'verbose'
          'short' 'color:' 'makedepends' 'optdepends' 'checkdepends' 'key:'
          'json' 'format:')
opt_hidden=('dump-options' 'raw' 'format-stdin' 'table')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset format format_str format_args query_args
while true; do
    case "$1" in
        -a|--any)
            multiple=union ;;
        -i|--info)
            type=info ;;
        -s|--search)
            type=search ;;
        -d|--desc)
            search_by=name-desc ;;
        -m|--maintainer)
            search_by=maintainer ;;
        -n|--name)
            search_by=name ;;
        --depends)
            search_by=depends ;;
        --makedepends)
            search_by=makedepends ;;
        --optdepends)
            search_by=optdepends ;;
        --checkdepends)
            search_by=checkdepends ;;
        --color)
            shift; color=$1 ;;
        -q|--short)
            format=short ;;
        -v|--verbose)
            format=long ;;
        -f|--format)
            shift; format_str=$1
            format=custom ;;
        --format-stdin)
            mode=stdin ;;
        -r|--raw|--json)
            format=json ;;
        -k|--key)
            shift; sort_key=$1 ;;
        # deprecated options
        --table)
            printf >&2 'deprecation notice: --table is replaced by aur-format\n'
            format=table ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# Colored messages on both stdout and stderr may be desired if stdout is not
# connected to a terminal, e.g. when piping to less -R. (#585) When printing to
# a file, they should be disabled instead. Default to `--color=auto` but allow
# specifying other modes.
colorize=0
if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    if [[ $color == 'auto' ]]; then
        [[ -t 1 ]] && colorize=1

    elif [[ $color == 'always' ]]; then
        colorize=1

    elif [[ $color != 'none' ]]; then
        printf >&2 '%s: invalid --color mode\n' "$argv0"
        exit 1
    fi
fi

if ! (( $# )) && ! [[ $mode == "stdin" ]]; then
    usage
fi

# set format depending on query type (#319)
case $type in
      info) format=${format-long}  ;;
    search) format=${format-short} ;;
esac

# intersection of results (#313)
# XXX: set intersection key from `search_by` value
case $multiple in
    section) format_args+=(--isect 'Name') ;;
      union) format_args+=(--union 'Name') ;;
esac

# sort results by key
format_args+=(-k "$sort_key")

# output filters
case $format in
    short)
        format_args+=(-f '%n\t%v\t%d\t%m\t%w\t%p\t%o\n')
        info() { aur search--helper -v COLORIZE="$colorize" -v URL="$AUR_LOCATION/packages" -v SEARCH=1; } ;;
    long)
        format_args+=(-f '%n\t%b\t%v\t%d\t%U\t%K\t%e\t%m\t%w\t%p\t%o\t%S\t%L\t%D\t%M\t%c\t%O\t%C\t%P\n')
        info() { aur search--helper -v COLORIZE="$colorize" -v URL="$AUR_LOCATION/packages" -v INFO=1  ; } ;;
    table) # deprecated
        format_args+=(-f '%n\t%b\t%v\t%d\t%U\t%K\t%e\t%m\t%w\t%p\t%o\t%S\t%L\t%D\t%M\t%c\t%O\t%C\t%P\n')
        info() { aur search--helper; } ;;
    custom)
        format_args+=(-f "$format_str")
        info() { aur search--helper; } ;; # NOOP, exit 1 if no lines processed
    json)
        format_args+=(--json)
        info() { aur search--helper; } ;;
esac

case $mode in
    query)
        input() { aur query -t "$type" -b "$search_by" "$@"; } ;;
    stdin)
        input() { tee; } ;; # JSON from stdin, e.g. aur-pkglist
esac

# main pipeline
input "$@" | aur format "${format_args[@]}" -v | info
pstate=("${PIPESTATUS[@]}")

if (( pstate[0] )) || (( pstate[1] )); then
    exit 2 # aur-query or aurweb response error

elif (( pstate[2] )); then
    exit 1 # no results found
fi

# vim: set et sw=4 sts=4 ft=sh:

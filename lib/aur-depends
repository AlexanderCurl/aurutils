#!/bin/bash
# aur-depends - retrieve package dependencies using AurJson
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=depends
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
max_request=30 mode=pkgname

# default options (dependency types)
resolve_depends=1 resolve_makedepends=1 resolve_checkdepends=1 resolve_optdepends=0

# $1 pkgname $2 pkgbase $3 pkgver [$4 deps] [$5 mdeps] [$6 cdeps] [$7 odeps]
pivot_table() {
    awk -F'\t' 'BEGIN {
        format = "%s\t%s\t%s\t%s\t%s\n"
    } {
        # Print header (package without dependencies)
        printf(format, $1, $1, $2, $3, "Self")

        # Print one line for each dependency
        split($4, depends, ",")
        split($5, makedepends, ",")
        split($6, checkdepends, ",")
        split($7, optdepends, ",")

        for (idx in depends)
            printf(format, $1, depends[idx], $2, $3, "Depends")
        for (idx in makedepends)
            printf(format, $1, makedepends[idx], $2, $3, "MakeDepends")
        for (idx in checkdepends)
            printf(format, $1, checkdepends[idx], $2, $3, "CheckDepends")
        for (idx in optdepends)
            printf(format, $1, optdepends[idx], $2, $3, "OptDepends")
    }' "$@"
}

# $1 pkgname $2 depends $3 pkgbase
pkgbase_graph() {
    awk '{
        pkgbase[$1] = $3
        depends[$2] = 1
    }
    END {
        for (pkg in depends) {
            if (pkg in pkgbase) {
                printf("%s\t%s\n", pkg, pkgbase[pkg])
            }
        }
    }' "$@"
}

tr_ver() {
    sed -r 's/[<>=].*$//g'
}

# shellcheck disable=SC2086
chain() {
    local a sub fmt=$1
    shift 1

    # Top-level AUR request
    aur query -t info "$@" >json/0 || exit

    # Top-level dependencies
    # XXX: handle format errors
    aur format -f "$fmt" --delim=, json/0 | pivot_table - >tsv/0 || exit

    if [[ ! -s tsv/0 ]]; then
        return 0 # no packages found
    fi

    # In the below, all intermediary results are stored (originally done to
    # simplify debugging). Strictly speaking, only the current and previous
    # step are required. With a limited amount of requests (e.g. ~7 total
    # for large meta-packages such as ros-indigo-desktop and ~250 AUR
    # dependencies) the difference is unlikely to be noticeable.
    for (( a = 1; a <= max_request; ++a )); do
        sub=$(( a - 1 ))

        # Avoid querying duplicates (#4)
        cut -f1 tsv/$sub >> seen # mark pkgname as seen
        cut -f2 tsv/$sub | tr_ver | grep -Fxvf seen | \
            aur query -t info - > json/$a || exit # rpc error

        if [[ ! -s json/$a ]]; then
            return $a # no unique results (seen \ tsv == [empty])
        fi
        # XXX: handle format errors
        aur format -f "$fmt" --delim=, json/$a | pivot_table - >tsv/$a || exit

        if [[ ! -s tsv/$a ]]; then
            return $a  # no results, recursion complete
        fi
        cut -f2 tsv/$sub >> seen # mark depends as seen
    done

    # recursion limit exceeded
    return $max_request
}

trap_exit() {
    if [[ ! -v AUR_DEBUG ]]; then
        rm -rf -- "$tmp"
    else
        printf >&2 'AUR_DEBUG: %s: temporary files at %s\n' "$argv0" "$tmp"
    fi
}

usage() {
    printf >&2 'usage: %s [-abGnt]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='abJGnt'
opt_long=('table' 'pkgbase' 'pkgname' 'pkgname-all' 'graph' 'optdepends'
          'no-depends' 'no-makedepends' 'no-checkdepends' 'json')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

while true; do
    case "$1" in
        -b|--pkgbase)
            mode=pkgbase ;;
        -n|--pkgname)
            mode=pkgname ;;
        -a|--pkgname-all)
            mode=pkgname_all ;;
        -G|--graph)
            mode=pkgbase_graph ;;
        -t|--table)
            mode=table ;;
        -J|--json)
            mode=json ;;
        --no-depends)
            resolve_depends=0 ;;
        --no-makedepends)
            resolve_makedepends=0 ;;
        --no-checkdepends)
            resolve_checkdepends=0 ;;
        --optdepends)
            resolve_optdepends=1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# shellcheck disable=SC2174
mkdir -pm 0700 "${TMPDIR:-/tmp}/aurutils-$UID"
tmp=$(mktemp -d --tmpdir "aurutils-$UID/$argv0.XXXXXXXX") || exit
trap 'trap_exit' EXIT

# select dependency types
fmt="%n\t%b\t%v\t"
(( resolve_depends )) && fmt+="%D"
fmt+="\t"
(( resolve_makedepends )) && fmt+="%M"
fmt+="\t"
(( resolve_checkdepends )) && fmt+="%c"
fmt+="\t"
(( resolve_optdepends )) && fmt+="%O"
fmt+="\n"

# resolve dependency tree
rings=0
if cd "$tmp" && mkdir json tsv; then
    # tsv/*: pkgname\tdepends\tpkgbase\pkgver
    chain "$fmt" "$@"; rings=$?
    depends=(tsv/*) json=(json/*)

    # check iteration number
    case $rings in
        0) printf >&2 '%s: no packages found\n' "$argv0"
           exit 1 ;;
        1) true # no dependencies
           ;;
        "$max_request")
            printf >&2 '%s: total requests: %d (out of range)\n' "$argv0" $(( max_request + 1 ))
            exit 34 ;;
    esac

    case $mode in
        # pkgname (AUR, total order)
        pkgname)
            grep -Fxf <(cut -f1 "${depends[@]}") <(cut -f1,2 "${depends[@]}" | tsort | tac)
            ;;
        # pkgname (all, total order)
        pkgname_all)
            cat "${depends[@]}" | cut -f1,2 | tsort | tac
            ;;
        # pkgbase (AUR, total order)
        pkgbase)
            pkgbase_graph "${depends[@]}" | tsort | tac
            ;;
        # pkgbase (AUR, graph)
        pkgbase_graph)
            pkgbase_graph "${depends[@]}" | sort -k1b,1 -k1 -u
            ;;
        # all information
        json)
            cat "${json[@]}" | aur format --union 'Name' --json
            ;;
        table)
            cat "${depends[@]}"
            ;;
        *)
            printf >&2 '%s: invalid argument' "$argv0"
            exit 22 ;;
    esac
else
    exit
fi

# vim: set et sw=4 sts=4 ft=sh:
